#what this folder is all about
#everything in python is an object
#Python2 vs python3
python3.0 release on 2008
In python2, the / symbol performs what is known as classic  division, this means the decimal points are truncated.
In python3 however, a single /performs "true" division. So you get 1.5 if you had inout 3/2.
To avoid this situation in python2 specify the numbers to be float.


from __future__ import division  >> this imports the future functionality of python 3 in python2

s[:1]  >> grab everything from first index till last in a string 's'
ex s = 'Nitish Yadav'
s[:1] = itish Yadav
This does not make any modification to the present string.

s[:3] >> upto 3, not included 3
s[:3] = 'Nit'
s[:] >>grab everything
# Grab everything, but go in steps size of 1
s[::1]
# We can use this to print a string backwards
s[::-1]

Lists:
Lists can be thought of the most general version of a sequence in Python. Unlike strings, they are mutable, meaning the elements inside a list can be changed!


# Append
l.append('append me!')




# Pop off the 0 indexed item
l.pop(0)



We can use the sort method and the reverse methods to also effect your lists:

new_list = ['a','e','x','b','c']

#Show
new_list

['a', 'e', 'x', 'b', 'c']
# Use reverse to reverse order (this is permanent!)
new_list.reverse()

new_list

['c', 'b', 'x', 'e', 'a']

# Use sort to sort the list (in this case alphabetical order, but for numbers it will go ascending)
new_list.sort()

new_list

['a', 'b', 'c', 'e', 'x']


Nesting Lists
A great feature of of Python data structures is that they support nesting.
# Let's make three lists
lst_1=[1,2,3]
lst_2=[4,5,6]
lst_3=[7,8,9]

# Make a list of lists to form a matrix
matrix = [lst_1,lst_2,lst_3]
# Show
matrix
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Grab first item in matrix object
matrix[0]
[1, 2, 3]

Dictionary cannot be indexed, we reference by keys. It consist a key and associated value. tha value can be almost any python object.

Tuples: In python tuples are very similar to lists, however, unlike lists they are immutable meaninig they can not be changed.
ex: t =(1,2,4,2) >> this is a tuple


Basic Practice:
http://codingbat.com/python
More Mathematical (and Harder) Practice:
https://projecteuler.net/archives
List of Practice Problems:
http://www.codeabbey.com/index/task_list
A SubReddit Devoted to Daily Practice Problems:
https://www.reddit.com/r/dailyprogrammer
A very tricky website with very few hints and touch problems (Not for beginners but still interesting)
http://www.pythonchallenge.com/



While Loop:

while test:
    code statement
    if test:
        break
    if test:
        continue
else:

break: Breaks out of the current closest enclosing loop
continue: Goes to the top of the closest enclosing loop.
pass: Does nothing at all


range()
range() allows us to create a list of numbers ranging from starting point up to an ending point, we can also assign step size.

Comprehensions:
List comprehensions allow us to build out lists using a different notation. You can think of it as essentially a one line for loop built inside of brackets.
#Grab every letter in string
lst = [x for x in 'word]

#create a list
l = []
for letter in 'word':
    l.append(letter)
    
print l

output: ['w','o','r','d']  

lst = [letter for letter in 'word'] 
#list of even numbers
l = [num for num in range(20) if num%2 ==0] 

Lambda?
lambda's body is a single expression, not a block of statements.
We can only squeeze design.
The best way to learn how to use lambda expressions is to slowly convert a normal 'def' function inot a lambda expression.
